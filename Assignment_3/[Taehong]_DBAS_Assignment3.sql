--Assignment 3 Taehong

--#1
DROP TABLE IF EXISTS RecordLogging;
GO
CREATE TABLE RecordLogging( -- Create new table 
	LogID INT IDENTITY(1,1) PRIMARY KEY, --Indentity is auto-increment
	TableName VARCHAR(30) NULL,
	RecordID INT NULL,
	ActionType VARCHAR(30) NOT NULL,
	IsError BIT NOT NULL,
	ErrorNum INT NULL,
	LogDate DATETIME NOT NULL);
GO --Using Go command to separate statements

--#2
CREATE OR ALTER PROC uspAddRecordLog -- A Stored proc which has 5 parameters
	@tableName VARCHAR(30),
	@recordId INT,
	@actionType VARCHAR(30),
	@isError BIT,
	@errorNum INT
AS
BEGIN TRAN
	BEGIN TRY
		INSERT INTO RecordLogging(TableName,RecordID,ActionType,IsError,ErrorNum,LogDate)
		VALUES(@tableName,@recordId,@actionType,@isError,@errorNum,GetDate()); --The Date is auto-Generated by the system 
	END TRY
	BEGIN CATCH -- If an error occurs in TRY block
		PRINT 'An error occurs';
		IF @@TRANCOUNT > 0 
			ROLLBACK TRAN -- When an error occurrs, rollback the tran
	END CATCH
IF @@TRANCOUNT > 0
	COMMIT TRAN --When no errors, Commit the tran
GO

--#3.1 for the Track table
CREATE OR ALTER PROC uspTrack_Insert
	@name NVARCHAR(200),
	@albumId INT = NULL, -- Setting a default parameter value
	@mediaTypeId INT,
	@genreId INT = NULL,
	@composer NVARCHAR(220) = NULL,
	@milliSeconds INT,
	@bytes INT = NULL,
	@unitPrice numeric(10,2), --ex 12345678.00
	@recordId INT OUTPUT -- to return PK ID, set an OUTPUT parameter
AS
BEGIN TRAN
	BEGIN TRY
		INSERT INTO Track(Name,AlbumId,MediaTypeId,GenreId,Composer,Milliseconds,Bytes,UnitPrice) 
				VALUES(@name,@albumId,@mediaTypeId,@genreId,@composer,@milliSeconds,@bytes,@unitPrice);
		SET @recordId = SCOPE_IDENTITY() --Server variable that stores the most recent id just inserted
		EXEC uspAddRecordLog 'Track', @recordId, 'INSERT', 0, 0; --If the insert action is successful, a call to the uspAddRecordLog proc 
	END TRY
	BEGIN CATCH
		DECLARE @errorNum INT
		SELECT ERROR_NUMBER() AS ErrorNumber,
				ERROR_SEVERITY() AS ErrorSeverity,
				ERROR_STATE() AS ErrorState,
				ERROR_PROCEDURE() AS ErrorProcedure,
				ERROR_LINE() AS ErrorLine,
				ERROR_MESSAGE() AS ErrorMessage;
		SET @recordId = -1 -- Setting a variable @recordId
		SET @errorNum = ERROR_NUMBER() -- Setting a variable errorNum to get an error number
		EXEC uspAddRecordLog 'Track', @recordId, 'INSERT', 1, @errorNum --If the insert action is NOT successful, a different call to the uspAddRecordLog proc 
	END CATCH;
COMMIT TRAN;
GO

--#3.2 for the Artist table
CREATE OR ALTER PROC uspArtist_Insert
	@name NVARCHAR(120) NULL,
	@recordId INT OUTPUT -- to return PK ID, set an OUTPUT parameter
AS
BEGIN TRAN
	BEGIN TRY
		INSERT INTO Artist (Name) VALUES (@name);
		SET @recordId = SCOPE_IDENTITY() --Server variable that stores the most recent id just inserted
		EXEC uspAddRecordLog 'Artist', @recordId, 'INSERT', 0, 0;
	END TRY
	BEGIN CATCH
		DECLARE @errorNum INT
		SELECT ERROR_NUMBER() AS ErrorNumber,
				ERROR_SEVERITY() AS ErrorSeverity,
				ERROR_STATE() AS ErrorState,
				ERROR_PROCEDURE() AS ErrorProcedure,
				ERROR_LINE() AS ErrorLine,
				ERROR_MESSAGE() AS ErrorMessage;
		SET @recordId = -1
		SET @errorNum = ERROR_NUMBER()
		EXEC uspAddRecordLog 'Artist', @recordId, 'INSERT', 1, @errorNum
	END CATCH;
COMMIT TRAN;
GO

--#3.3 for the Album table
CREATE OR ALTER PROC uspAlbum_Insert
	@title NVARCHAR(160),
	@ArtistId INT,
	@recordId INT OUTPUT
AS
BEGIN TRAN
	BEGIN TRY
		INSERT INTO Album (Title, ArtistId) VALUES (@title, @ArtistId);
		SET @recordId = SCOPE_IDENTITY()
		EXEC uspAddRecordLog 'Album', @recordId, 'INSERT', 0, 0;
	END TRY
	BEGIN CATCH
		DECLARE @errorNum INT
		SELECT ERROR_NUMBER() AS ErrorNumber,
				ERROR_SEVERITY() AS ErrorSeverity,
				ERROR_STATE() AS ErrorState,
				ERROR_PROCEDURE() AS ErrorProcedure,
				ERROR_LINE() AS ErrorLine,
				ERROR_MESSAGE() AS ErrorMessage;
		SET @recordId = -1
		SET @errorNum = ERROR_NUMBER()
		EXEC uspAddRecordLog 'Album', @recordId, 'INSERT', 1, @errorNum
	END CATCH;
COMMIT TRAN;
GO

--#3.4 for the Genre table
CREATE OR ALTER PROC uspGenre_Insert
	@name NVARCHAR(120) NULL,
	@recordId INT OUTPUT
AS
BEGIN TRAN
	BEGIN TRY
		INSERT INTO Genre (Name) VALUES (@name);
		SET @recordId = SCOPE_IDENTITY()
		EXEC uspAddRecordLog 'Genre', @recordId, 'INSERT', 0, 0;
	END TRY
	BEGIN CATCH
		DECLARE @errorNum INT
		SELECT ERROR_NUMBER() AS ErrorNumber,
				ERROR_SEVERITY() AS ErrorSeverity,
				ERROR_STATE() AS ErrorState,
				ERROR_PROCEDURE() AS ErrorProcedure,
				ERROR_LINE() AS ErrorLine,
				ERROR_MESSAGE() AS ErrorMessage;
		SET @recordId = -1
		SET @errorNum = ERROR_NUMBER()
		EXEC uspAddRecordLog 'Genre', @recordId, 'INSERT', 1, @errorNum
	END CATCH;
COMMIT TRAN;
GO

--#3.5 for the MediaType table
CREATE OR ALTER PROC uspMediaType_Insert
	@name NVARCHAR(120) NULL,
	@recordId INT OUTPUT
AS
BEGIN TRAN
	BEGIN TRY
		INSERT INTO MediaType (Name) VALUES (@name);
		SET @recordId = SCOPE_IDENTITY()
		EXEC uspAddRecordLog 'MediaType', @recordId, 'INSERT', 0, 0;
	END TRY
	BEGIN CATCH
		DECLARE @errorNum INT
		SELECT ERROR_NUMBER() AS ErrorNumber,
				ERROR_SEVERITY() AS ErrorSeverity,
				ERROR_STATE() AS ErrorState,
				ERROR_PROCEDURE() AS ErrorProcedure,
				ERROR_LINE() AS ErrorLine,
				ERROR_MESSAGE() AS ErrorMessage;
		SET @recordId = -1
		SET @errorNum = ERROR_NUMBER()
		EXEC uspAddRecordLog 'MediaType', @recordId, 'INSERT', 1, @errorNum
	END CATCH;
COMMIT TRAN;
GO

--#4.1 for the Track table
CREATE OR ALTER PROC uspTrack_DeleteByID
	@TrackId INT
AS
BEGIN TRAN
	BEGIN TRY
		DELETE FROM Track WHERE TrackId = @TrackId;
		EXEC uspAddRecordLog 'Track', @TrackId, 'DELETE', 0, 0; --If the delete action is successful, a call to the uspAddRecordLog proc
	END TRY
	BEGIN CATCH
		DECLARE @errorNum INT
		SELECT ERROR_NUMBER() AS ErrorNumber,
				ERROR_SEVERITY() AS ErrorSeverity,
				ERROR_STATE() AS ErrorState,
				ERROR_PROCEDURE() AS ErrorProcedure,
				ERROR_LINE() AS ErrorLine,
				ERROR_MESSAGE() AS ErrorMessage;
		SET @TrackId = -1
		SET @errorNum = ERROR_NUMBER()
		EXEC uspAddRecordLog 'Track', @TrackId, 'DELETE', 1, @errorNum --If the delete action is NOT successful, a different call to the uspAddRecordLog proc 
	END CATCH;
COMMIT TRAN;
GO

--#4.2 for the Artist table
CREATE OR ALTER PROC uspArtist_DeleteByID
	@ArtistId INT
AS
BEGIN TRAN
	BEGIN TRY
		DELETE FROM Artist WHERE ArtistId = @ArtistId;
		EXEC uspAddRecordLog 'Artist', @ArtistId, 'DELETE', 0, 0;
	END TRY
	BEGIN CATCH
		DECLARE @errorNum INT
		SELECT ERROR_NUMBER() AS ErrorNumber,
				ERROR_SEVERITY() AS ErrorSeverity,
				ERROR_STATE() AS ErrorState,
				ERROR_PROCEDURE() AS ErrorProcedure,
				ERROR_LINE() AS ErrorLine,
				ERROR_MESSAGE() AS ErrorMessage;
		SET @ArtistId = -1
		SET @errorNum = ERROR_NUMBER()
		EXEC uspAddRecordLog 'Artist', @ArtistId, 'DELETE', 1, @errorNum
	END CATCH;
COMMIT TRAN;
GO

--#4.3 for the Album table
CREATE OR ALTER PROC uspAlbum_DeleteByID
	@AlbumId INT
AS
BEGIN TRAN
	BEGIN TRY
		DELETE FROM Album WHERE AlbumId = @AlbumId;
		EXEC uspAddRecordLog 'Album', @AlbumId, 'DELETE', 0, 0;
	END TRY
	BEGIN CATCH
		DECLARE @errorNum INT
		SELECT ERROR_NUMBER() AS ErrorNumber,
				ERROR_SEVERITY() AS ErrorSeverity,
				ERROR_STATE() AS ErrorState,
				ERROR_PROCEDURE() AS ErrorProcedure,
				ERROR_LINE() AS ErrorLine,
				ERROR_MESSAGE() AS ErrorMessage;
		SET @AlbumId = -1
		SET @errorNum = ERROR_NUMBER()
		EXEC uspAddRecordLog 'Album', @AlbumId, 'DELETE', 1, @errorNum
	END CATCH;
COMMIT TRAN;
GO

--#4.4 for the Genre table
CREATE OR ALTER PROC uspGenre_DeleteByID
	@GenreId INT
AS
BEGIN TRAN
	BEGIN TRY
		DELETE FROM Genre WHERE GenreId = @GenreId;
		EXEC uspAddRecordLog 'Genre', @GenreId, 'DELETE', 0, 0;
	END TRY
	BEGIN CATCH
		DECLARE @errorNum INT
		SELECT ERROR_NUMBER() AS ErrorNumber,
				ERROR_SEVERITY() AS ErrorSeverity,
				ERROR_STATE() AS ErrorState,
				ERROR_PROCEDURE() AS ErrorProcedure,
				ERROR_LINE() AS ErrorLine,
				ERROR_MESSAGE() AS ErrorMessage;
		SET @GenreId = -1
		SET @errorNum = ERROR_NUMBER()
		EXEC uspAddRecordLog 'Genre', @GenreId, 'DELETE', 1, @errorNum
	END CATCH;
COMMIT TRAN;
GO

--#4.5 for the MediaType table
CREATE OR ALTER PROC uspMediaType_DeleteByID
	@MediaTypeId INT
AS
BEGIN TRAN
	BEGIN TRY
		DELETE FROM MediaType WHERE MediaTypeId = @MediaTypeId;
		EXEC uspAddRecordLog 'MediaType', @MediaTypeId, 'DELETE', 0, 0;
	END TRY
	BEGIN CATCH
		DECLARE @errorNum INT
		SELECT ERROR_NUMBER() AS ErrorNumber,
				ERROR_SEVERITY() AS ErrorSeverity,
				ERROR_STATE() AS ErrorState,
				ERROR_PROCEDURE() AS ErrorProcedure,
				ERROR_LINE() AS ErrorLine,
				ERROR_MESSAGE() AS ErrorMessage;
		SET @MediaTypeId = -1
		SET @errorNum = ERROR_NUMBER()
		EXEC uspAddRecordLog 'MediaType', @MediaTypeId, 'DELETE', 1, @errorNum
	END CATCH;
COMMIT TRAN;
GO

--Executing Procs & Testing Statements
--With valid data
DECLARE @recordId INT; --To assign the returned value to                                          --A parameter to get a PK ID 
EXEC uspTrack_Insert @name = 'test', @mediaTypeId = 1, @milliSeconds = 234242, @unitPrice = 2.22, @recordId = @recordId OUTPUT; --A Insert procedure
EXEC uspTrack_DeleteByID @recordId; --A Delete procedure

EXEC uspMediaType_Insert 'test', @recordId = @recordId OUTPUT;
EXEC uspMediaType_DeleteByID @recordId

EXEC uspGenre_Insert 'test', @recordId = @recordId OUTPUT;
EXEC uspGenre_DeleteByID @recordId;

EXEC uspArtist_Insert 'name', @recordId = @recordId OUTPUT;
EXEC uspArtist_DeleteByID @recordId;

EXEC uspAlbum_Insert 'test', 1, @recordId = @recordId OUTPUT;
EXEC uspAlbum_DeleteByID @recordId;

--With Invalid data
EXEC uspAlbum_Insert 'test', 3123, @recordId = @recordId OUTPUT; -- a number 547 error will occur.(The error is a Foreign Key Constraint violation.)
EXEC uspTrack_Insert @name = 'test', @mediaTypeId = 6, @milliSeconds = 234242, @unitPrice = 2.22, @recordId = @recordId OUTPUT;
GO






































































