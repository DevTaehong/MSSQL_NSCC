--Assignment 2 Taehong

--#1
ALTER TABLE Chinook.dbo.Invoice
	ADD Paid BIT NULL DEFAULT 0; --Boolean defalut is set to false
GO --Using Go command to separate statements
--#2
DROP TABLE IF EXISTS InvoicePayment;
GO
CREATE TABLE InvoicePayment( -- New table 
	PaymentID INT IDENTITY(1,1) PRIMARY KEY, --Indentity is auto-increment
	InvoiceID INT FOREIGN KEY REFERENCES Invoice(InvoiceID) NOT NULL,
	CustomerID INT FOREIGN KEY REFERENCES Customer(CustomerID) NOT NULL,
	PaymentDate DATETIME NOT NULL,
	Amount NUMERIC(10,2) NOT NULL);
GO
--#3
--Proc 1
CREATE OR ALTER PROC uspAddNewInvoice -- A stored proc which has 11 parameters
	@CustomerID int,
	@BillingAddress varchar(70),
	@BillingCity varchar(40),
	@BillingState varchar(40),
	@BillingCountry varchar(40),
	@BillingPostalCode varchar(10),
	@Paid bit,
	@InvoiceID int,
	@TrackID int,
	@UnitPrice numeric(10,2), --ex 12345678.00
	@Quantity int
AS
INSERT INTO InvoiceLine (InvoiceID, TrackID, UnitPrice, Quantity)
VALUES (@InvoiceID, @TrackID, @UnitPrice, @Quantity)

INSERT INTO Invoice(CustomerId,InvoiceDate,BillingAddress,BillingCity,BillingState,BillingCountry,BillingPostalCode,Total,Paid)
VALUES (@CustomerID,GetDate(),@BillingAddress,@BillingCity,@BillingState,@BillingCountry,@BillingPostalCode,(@Quantity+@UnitPrice),@Paid)
GO                --The Date is auto-Generated by the system                                               --Total is Quantity + Unitprice

--Proc 2
CREATE OR ALTER PROC uspAddInvoicePayment
	@InvocieID int,
	@CustomerID int,
	@Amount numeric(10,2)
AS
INSERT INTO InvoicePayment(InvoiceID,CustomerID,PaymentDate,Amount) --The Date is auto-Generated by the system 
VALUES(@InvocieID,@CustomerID,GetDate(),@Amount) 
GO

--Proc 3
CREATE OR ALTER PROC uspRunInvoices
AS
DECLARE @counter int
DECLARE @maxInvoiceID int
DECLARE @invoiceID int
DECLARE @amount numeric(10,2)
DECLARE @customerID int

SET @counter = 1; --Initialized
SELECT @maxInvoiceID = MAX(InvoiceId) FROM Invoice; --Setting variable maxInvoiceID
BEGIN TRAN
	BEGIN TRY
		WHILE (@counter <= @maxInvoiceID) -- Executing until counter is same with @maxInvoiceID
		BEGIN
			SELECT @invoiceID = InvoiceID, 
				@customerID = CustomerId, 
				@amount = Total
			FROM Invoice WHERE InvoiceId = @counter;
			BEGIN
				EXEC uspAddInvoicePayment @invoiceID, @customerID, @amount
			END
			SET @counter += 1; -- Increment of the counter
		END
		IF @@TRANCOUNT > 0 --When no errors, Commit the tran
			COMMIT TRAN;
	END TRY
	BEGIN CATCH -- When an error occurrs, Begin catch
		PRINT 'Oh noes! An error occurred!'
		IF @@TRANCOUNT > 0
			ROLLBACK TRAN -- When an error occurrs, rollback the tran
	END CATCH
GO

--Proc 4
CREATE OR ALTER PROC uspCheckPaidInvoices --No parameters
AS
DECLARE @counter int
DECLARE @maxInvoiceID int
DECLARE @amountInPayment numeric(10,2)
DECLARE @totalInInvoice numeric(10,2)

SET @counter = 1; --Initialized
SELECT @maxInvoiceID = MAX(InvoiceId) FROM Invoice; --Setting variable maxInvoiceID
BEGIN TRAN
	BEGIN TRY
		WHILE (@counter <= @maxInvoiceID) -- Executing until counter is same with @maxInvoiceID
		BEGIN
			SELECT @amountInPayment = Amount FROM InvoicePayment WHERE InvoiceID = @counter
			SELECT @totalInInvoice = Total FROM Invoice WHERE InvoiceId = @counter

			IF(@amountInPayment = @totalInInvoice) --When Amount in InvoicePayment table and Total in Invoice table are same, execute
			BEGIN
				UPDATE Invoice SET Paid = 1 WHERE InvoiceId = @counter -- Setting Paid to True in Invoice Table
			END
			SET @counter += 1; -- Increment of the counter
		END
		IF @@TRANCOUNT > 0 --When no errors, Commit the tran
			COMMIT TRAN;
	END TRY
	BEGIN CATCH -- When an error occurrs, Begin catch
		PRINT 'Oh noes! An error occurred!'
		IF @@TRANCOUNT > 0  
			ROLLBACK TRAN -- When an error occurrs, rollback the tran
	END CATCH
GO

--Testing Scripts
--Test 1
EXEC uspAddNewInvoice 59,'39 Chadwick Streest','Dartmouth','NS','Canada','B2B2Y2',0,419,3031,2.22,2;

--Test 2
EXEC uspAddInvoicePayment 419,59,4.21;

--Test 3
DECLARE @counter int
DECLARE @maxInvoiceID int
SET @counter = 1; --Initialized
SELECT @maxInvoiceID = MAX(InvoiceId) FROM Invoice; --Setting variable maxInvoiceID
BEGIN TRAN
	BEGIN TRY
		WHILE (@counter <= @maxInvoiceID) -- Executing until counter is same with @maxInvoiceID
		BEGIN
			UPDATE Invoice SET Paid = 0 WHERE InvoiceId = @counter
			SET @counter += 1;-- Increment of the counter
		END
		IF @@TRANCOUNT > 0--When no errors, Commit the tran
			COMMIT TRAN;
	END TRY
	BEGIN CATCH -- When an error occurrs, Begin catch
		PRINT 'Oh noes! An error occurred!'
		IF @@TRANCOUNT > 0
			ROLLBACK TRAN-- When an error occurrs, rollback the tran
	END CATCH
GO

--Test 4
DECLARE @counter int
DECLARE @maxPaymentID int
SET @counter = 1; --Initialized
SELECT @maxPaymentID = MAX(PaymentID) FROM InvoicePayment; --Setting variable maxPaymentID
BEGIN TRAN
	BEGIN TRY
		WHILE (@counter <= @maxPaymentID) -- Executing until counter is same with @maxPaymentID
		BEGIN
			DELETE InvoicePayment WHERE PaymentID = @counter --Delete All existing records from the InvoicePayment table
			SET @counter += 1;-- Increment of the counter
		END
		IF @@TRANCOUNT > 0--When no errors, Commit the tran
			COMMIT TRAN;
	END TRY
	BEGIN CATCH -- When an error occurrs, Begin catch
		PRINT 'Oh noes! An error occurred!'
		IF @@TRANCOUNT > 0
			ROLLBACK TRAN-- When an error occurrs, rollback the tran
	END CATCH
GO

--Test 5
EXEC uspRunInvoices;

--Test 6
EXEC uspCheckPaidInvoices;
GO




















